references:
  build_config: &build_config
    machine: true
    working_directory: ~/app
    environment:
      - DOCKER_FILE: Dockerfile
      # - DOCKER_REPO_URL: 898944850488.dkr.ecr.ap-northeast-1.amazonaws.com
      - APP_NAME: testCi

  # build_nginx_config: &build_nginx_config
  #   machine: true
  #   working_directory: ~/owners
  #   environment:
  #     - DOCKER_FILE: Dockerfile.nginx
  #     - DOCKER_REPO_URL: 898944850488.dkr.ecr.ap-northeast-1.amazonaws.com
  #     - APP_NAME: owners-nginx
  #     - APP_HOST: owners

  # build_fluentd_config: &build_fluentd_config
  #   machine: true
  #   working_directory: ~/owners
  #   environment:
  #     - DOCKER_FILE: Dockerfile.fluentd
  #     - DOCKER_REPO_URL: 898944850488.dkr.ecr.ap-northeast-1.amazonaws.com
  #     - APP_NAME: owners-fluentd

  # deployment_config: &deployment_config
  #   machine: true
  #   working_directory: ~/owners
  #   environment:
  #     - DOCKER_REPO_URL: 898944850488.dkr.ecr.ap-northeast-1.amazonaws.com
  #     - CONTAINER_PORT: 80
  #     - APP_NAME: owners
  #     - WEB_NAME: owners-nginx
  #     - LOG_NAME: owners-fluentd
  #     - DEPLOYMENT_MAX_PERCENT: 200
  #     - DEPLOYMENT_MIN_HEALTHY_PERCENT: 50
  #     - TIMEOUT: 30
  #     - BASE_ROLE_ARN: arn:aws:iam::898944850488:role

version: 2
jobs:
  build:
    <<: *build_config
    working_directory: ~/app
    steps:
      # - checkout
      - run:
            # sudo apt-get install ssh
            # ssh root@139.162.21.191
          name: Deploy Over SSH
          command: |
            ls

  deploy:
    machine:
      enabled: true
    working_directory: ~/app
    steps:
      - run:
            # ssh root@139.162.21.191 "bundle exec rails s"
          name: Deploy Over SSH
          command: |
            ls --all
            bundle exec rails s

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master

# version: 2
# jobs:
#   build:
#     docker:
#       # specify the version you desire here
#        - image: circleci/ruby:2.4.1-node-browsers

#       # Specify service dependencies here if necessary
#       # CircleCI maintains a library of pre-built images
#       # documented at https://circleci.com/docs/2.0/circleci-images/
#       # - image: circleci/postgres:9.4

#     working_directory: ~/repo

#     steps:
#       - checkout

#       # Download and cache dependencies
#       - restore_cache:
#           keys:
#           - v1-dependencies-{{ checksum "Gemfile.lock" }}
#           # fallback to using the latest cache if no exact match is found
#           - v1-dependencies-

#       - run:
#           name: install dependencies
#           command: |
#             bundle install --jobs=4 --retry=3 --path vendor/bundle

#       - save_cache:
#           paths:
#             - ./vendor/bundle
#           key: v1-dependencies-{{ checksum "Gemfile.lock" }}

#       # Database setup
#       - run: bundle exec rake db:create
#       - run: bundle exec rake db:migrate

#       # run tests!
#       - run:
#           name: run tests
#           command: |
#             mkdir /tmp/test-results
#             TEST_FILES="$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)"

#             bundle exec rspec --format progress \
#                             --format RspecJunitFormatter \
#                             --out /tmp/test-results/rspec.xml \
#                             --format progress \
#                             $TEST_FILES

#       # collect reports
#       - store_test_results:
#           path: /tmp/test-results
#       - store_artifacts:
#           path: /tmp/test-results
#           destination: test-results
